/**
 * Events that happened in the Lightrail system.  Multiple microservices
 * may generate events and multiple microservices may subscribe to them.
 *
 * This interface is based upon the CloudEvents spec under the hope there could
 * be benefits from compatible tooling.
 * @see https://github.com/cloudevents/spec
 */
export interface LightrailEvent {
    /**
     * The version of the CloudEvents specification which the event uses.
     */
    specversion: "1.0";

    /**
     * Dot-separated namespace of the event type.
     * eg: `lightrail.transaction.created`
     *
     * Naming guideline:
     * - Do start with `lightrail` unless the event was generated by another system
     *    and we're simply passing it along (eg `stripe`).
     * - Do use the present tense for events that are starting.
     * - Do use the past tense for events that have completed.
     * - Do use use CRUDL language (created, updated, deleted) where possible.
     * - Don't use the name of the internal service in the event name.  That's an
     *    implementation detail that may change with rearchitecting.
     * - Don't start with `com` despite what the CloudEvents spec says.  Nobody
     *    liked it when Java did it.  Why can't we learn from our mistakes?
     */
    type: string;

    /**
     * The service that generated the event formatted as a URI-reference.
     * eg: `/lightrail/rothschild`
     */
    source: string;

    /**
     * The ID of the event.  The combination of `source` + `id` must be unique.
     */
    id: string;

    /**
     * The ISO-8601 date of when the event was generated.
     */
    time: Date | string;

    /**
     * The Lightrail userId of the account that generated the event (if any).
     *
     * Why `userid` and not `userId`?  Per the CloudEvents spec: CloudEvents attribute
     * names MUST consist of lower-case letters ('a' to 'z') or digits ('0' to '9') from
     * the ASCII character set.
     */
    userid?: string;

    /**
     * MIME type of the event data.  Currently we're only doing JSON payloads
     * but there may be use cases for other in the future.
     */
    datacontenttype: "application/json";

    /**
     * The event body.  The shape is entirely dependent upon the type of the event.
     * Breaking changes are a big deal and need to be coordinated.  Adding new properties
     * is not a breaking change.
     */
    data: any;
}
