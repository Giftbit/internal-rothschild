# see https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Rothschild banking proof of concept

Parameters:
  BuildDate:
    Type: String
    Description: Input to the PostDeployInvocation function to force it to run on every deployment.
    Default: "date +%s"
  Capacity:
    AllowedValues : ["high", "low"]
    Type: String
  DatabaseUsername:
    AllowedPattern: "[a-zA-Z0-9]+"
    Description: The database admin account user name, between 1 to 16 alphanumeric characters.
    MaxLength: 16
    MinLength: 1
    Type: String
  DatabasePassword:
    AllowedPattern: "[a-zA-Z0-9]+"
    Description: The database admin account password, between 8 to 41 alphanumeric characters.
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String
  VpcUniqueNumber:
    Type: Number
    Description: The value to prefix the regions subnets with
    Default: 1
    MaxValue: 251
    MinValue: 1

Conditions:
  HighCapacity: !Equals [!Ref Capacity, "high"]

Mappings:
  # aws --region [region-name] ec2 describe-images --owners amazon --filters "Name=root-device-type,Values=ebs" \
  #   "Name=name,Values=amzn-ami-vpc-nat-hvm-*" "Name=architecture,Values=x86_64" --query "Images[].[ImageId,Name]" \
  #   --output text
  RegionNatImageMap:
    us-west-2:
      "64": ami-8437a5e4
    us-east-1:
      "64": ami-258e1f33

Resources:
  # database encryption
  DatabaseEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "${AWS::StackName} database encryption key"
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"

  # vpc
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub "10.${VpcUniqueNumber}.0.0/16"
      EnableDnsHostnames: true
      Tags:
        - Key: Service
          Value: Rothschild
  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "3306"
          ToPort: "3306"
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Tags:
        - Key: Service
          Value: Rothschild
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda egress
      VpcId: !Ref VPC

#  InternetGateway:
#    Type: AWS::EC2::InternetGateway
#    Properties:
#      Tags:
#        - Key: Service
#          Value: Rothschild
#  InternetGatewayAttachment:
#    Type: AWS::EC2::VPCGatewayAttachment
#    Properties:
#      VpcId: !Ref VPC
#      InternetGatewayId: !Ref InternetGateway
#  NatInstance:
#    Type: AWS::EC2::Instance
#    Properties:
#      ImageId: !FindInMap [RegionNatImageMap, !Ref "AWS::Region", 64]
#      AvailabilityZone: us-west-2b
#      SourceDestCheck: false
#      InstanceType: !Ref NatInstanceType
#      SubnetId: !Ref SubnetPublicB
#      SecurityGroupIds:
#        - !Ref NatSecurityGroup
#      Tags:
#        - Key: Service
#          Value: Rothschild
#  NatElasticIP:
#    Type: AWS::EC2::EIP
#    Properties:
#      Domain: vpc
#      InstanceId: !Ref NatInstance
#  NatSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupName: !Sub "${AWS::StackName}-NAT"
#      GroupDescription: !Sub "${AWS::StackName} NAT"
#      VpcId: !Ref VPC
#      SecurityGroupIngress:
#        # HTTP Access from the App Server Subnet
#        - FromPort: 80
#          ToPort: 80
#          IpProtocol: tcp
#          CidrIp: !Sub "10.${VpcUniqueNumber}.21.0/24"
#        - FromPort: 80
#          ToPort: 80
#          IpProtocol: tcp
#          CidrIp: !Sub "10.${VpcUniqueNumber}.22.0/24"
#        - FromPort: 80
#          ToPort: 80
#          IpProtocol: tcp
#          CidrIp: !Sub "10.${VpcUniqueNumber}.23.0/24"
#        # HTTPS Access from the App Server Subnet
#        - FromPort: 443
#          ToPort: 443
#          IpProtocol: tcp
#          CidrIp: !Sub "10.${VpcUniqueNumber}.21.0/24"
#        - FromPort: 443
#          ToPort: 443
#          IpProtocol: tcp
#          CidrIp: !Sub "10.${VpcUniqueNumber}.22.0/24"
#        - FromPort: 443
#          ToPort: 443
#          IpProtocol: tcp
#          CidrIp: !Sub "10.${VpcUniqueNumber}.23.0/24"
#        # HTTPS Access from the App Server Subnet
#        - FromPort: 123
#          ToPort: 123
#          IpProtocol: udp
#          CidrIp: !Sub "10.${VpcUniqueNumber}.21.0/24"
#        - FromPort: 123
#          ToPort: 123
#          IpProtocol: udp
#          CidrIp: !Sub "10.${VpcUniqueNumber}.22.0/24"
#        - FromPort: 123
#          ToPort: 123
#          IpProtocol: udp
#          CidrIp: !Sub "10.${VpcUniqueNumber}.23.0/24"
#      SecurityGroupEgress:
#        # Outgoing HTTP Access
#        - FromPort: 80
#          ToPort: 80
#          IpProtocol: tcp
#          CidrIp: 0.0.0.0/0
#        # Outgoing HTTPS Access
#        - FromPort: 443
#          ToPort: 443
#          IpProtocol: tcp
#          CidrIp: 0.0.0.0/0
#        # Outgoing NTP Access
#        - FromPort: 123
#          ToPort: 123
#          IpProtocol: udp
#          CidrIp: 0.0.0.0/0
#      Tags:
#        - Key: Name
#          Value: !Sub "${EnvironmentName} Lightrail NAT"
  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "10.${VpcUniqueNumber}.11.0/24"
      AvailabilityZone: !Sub "${AWS::Region}a"
      Tags:
        - Key: Service
          Value: Rothschild
  SubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "10.${VpcUniqueNumber}.12.0/24"
      AvailabilityZone: !Sub "${AWS::Region}b"
      Tags:
        - Key: Service
          Value: Rothschild
  SubnetPrivateC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "10.${VpcUniqueNumber}.13.0/24"
      AvailabilityZone: !Sub "${AWS::Region}c"
      Tags:
        - Key: Service
          Value: Rothschild
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub "${AWS::StackName} database subnet group"
      SubnetIds:
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
        - !Ref SubnetPrivateC
      Tags:
        - Key: Service
          Value: Rothschild

  # database instance
  DbCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      BackupRetentionPeriod: 7
      PreferredBackupWindow: 09:17-09:47
      PreferredMaintenanceWindow: sun:06:57-sun:07:57
      Port: "3306"
      StorageEncrypted: true
      KmsKeyId: !Ref DatabaseEncryptionKey
      DBSubnetGroupName: !Ref DbSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DbSecurityGroup
      Tags:
        - Key: Service
          Value: Rothschild
    DeletionPolicy: Snapshot
  DbPrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref DbCluster
      DBInstanceClass: !If [HighCapacity, db.t2.medium, db.t2.medium]
      DBSubnetGroupName: !Ref DbSubnetGroup
      Tags:
        - Key: Service
          Value: Rothschild

#  HelloWorldFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: ../dist/helloWorld/helloWorld.zip
#      Handler: index.handler
#      Runtime: nodejs6.10
#      MemorySize: 128
#      Timeout: 30 # seconds, 300 max
#      Events:
#        RestApi:
#          Type: Api
#          Properties:
#            Path: /{proxy+}
#            Method: ANY

  PostDeployFunction:
    Type: AWS::Serverless::Function
    DependsOn: DbPrimaryInstance
    Properties:
      CodeUri: ../dist/postDeploy/postDeploy.zip
      Handler: index.handler
      Runtime: nodejs6.10
      MemorySize: 128
      Timeout: 120 # seconds, 300 max
      Environment:
        Variables:
          DB_ENDPOINT: !GetAtt DbCluster.Endpoint.Address
          DB_PORT: !GetAtt DbCluster.Endpoint.Port
          DB_USERNAME: !Ref DatabaseUsername
          DB_PASSWORD: !Ref DatabasePassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
        - !Ref SubnetPrivateC
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Tags:
        ShortName: PostDeployFunction
        Service: Rothschild
  PostDeployInvocation:
    Type: Custom::PostDeployInvocation
    Properties:
      ServiceToken: !GetAtt PostDeployFunction.Arn
      # This parameter isn't used, but changing it forces this function to run every time, which we want.
      BuildDate: !Ref BuildDate
