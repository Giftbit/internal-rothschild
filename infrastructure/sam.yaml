# see https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Rothschild

Parameters:
  BastionHostAuthorizedUsersGroup:
    Type: String
    Description: The IAM group authorized to access the bastion host for the VPC
  BuildDate:
    Type: String
    Description: Input to the PostDeployInvocation function to force it to run on every deployment.
    Default: "date +%s"
  Capacity:
    AllowedValues : ["high", "low"]
    Type: String
  DbEncryptionKeyId:
    Type: String
    Description: ID of the KMS key the DB will be encrypted with.  This has to be passed in because letting the CI stack create and delete KMS keys is too dangerous.
    AllowedPattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
  LightrailDomain:
    Type: String
    Description: The domain of the Lightrail REST API
    AllowedPattern: (\w+\.)+\w{3}
  SecureConfigBucket:
    Type: String
    Description: Name of the S3 bucket holding the JWT secure config
  SecureConfigKmsArn:
    Type: String
    Description: Optional ARN of the KMS encrypting SecureConfigBucket
    AllowedPattern: arn:aws:kms:[a-zA-Z_0-9\-]+:\d{12}:key/[a-zA-Z_0-9+=,.@\-_/]+
  VpcUniqueNumber:
    Type: Number
    Description: The value to prefix the regions subnets with
    Default: 1
    MaxValue: 251
    MinValue: 1

Conditions:
  HighCapacity: !Equals [!Ref Capacity, "high"]

Mappings:
  RegionBastionHostImageMap:
    # Values are derived from the following command:
    # aws --region [region-name] ec2 describe-images --owners amazon --filters "Name=root-device-type,Values=ebs" \
    #   "Name=name,Values=amzn-ami-hvm-*" "Name=architecture,Values=x86_64" --query "Images[].[CreationDate,ImageId,Name]" \
    #  --output text | sort
    us-west-2:
      "64": ami-09c6e771

Resources:
  # Start with a VPC and who can talk to what
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub "10.${VpcUniqueNumber}.0.0/16"
      EnableDnsHostnames: true
      Tags:
        # A lot of these resources have Name tags because they show up in the web console
        - Key: Name
          Value: !Sub "${AWS::StackName}"
        - Key: Service
          Value: Rothschild
  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Only listen to lambdas on the default port
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
      SecurityGroupEgress:
        # No outgoing traffic except localhost
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} db security group"
        - Key: Service
          Value: Rothschild
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda egress
      VpcId: !Ref VPC
      SecurityGroupEgress:
        # All outgoing TCP traffic is ok
        - FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} lambda security group"
        - Key: Service
          Value: Rothschild

  # Private subnet is where our DB and lambdas live
  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "10.${VpcUniqueNumber}.11.0/24"
      AvailabilityZone: !Sub "${AWS::Region}a"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} private a"
        - Key: Service
          Value: Rothschild
  SubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "10.${VpcUniqueNumber}.12.0/24"
      AvailabilityZone: !Sub "${AWS::Region}b"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} private b"
        - Key: Service
          Value: Rothschild
  SubnetPrivateC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "10.${VpcUniqueNumber}.13.0/24"
      AvailabilityZone: !Sub "${AWS::Region}c"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} private c"
        - Key: Service
          Value: Rothschild
  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} private"
        - Key: Service
          Value: Rothschild
  PrivateSubnetRouting:
    Type: AWS::EC2::Route
    DependsOn:
      - PrivateSubnetARouteTableAssociation
      - PrivateSubnetBRouteTableAssociation
      - PrivateSubnetCRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway # <- route to the nat
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref SubnetPrivateA
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref SubnetPrivateB
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref SubnetPrivateC

  # Enable internet access through a NAT to a public subnet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"
        - Key: Service
          Value: Rothschild
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  NatElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatElasticIP.AllocationId
      SubnetId: !Ref NatExitSubnet  # <- the nat goes out through NatExitSubnet
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"
        - Key: Service
          Value: Rothschild
  NatExitSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "10.${VpcUniqueNumber}.22.0/24"
      AvailabilityZone: !Sub "${AWS::Region}b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} nat exit"
        - Key: Service
          Value: Rothschild
  NatExitRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} nat exit"
        - Key: Service
          Value: Rothschild
  NatExitRouting:
    Type: AWS::EC2::Route
    DependsOn:
      - NatExitRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatExitRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway # <- route to the internet
  NatExitRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatExitRouteTable
      SubnetId: !Ref NatExitSubnet

  # Database credentials
  CredentialGenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist/credentialGen/credentialGen.zip
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 60 # seconds, 300 max
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - ssm:PutParameter
                - ssm:DeleteParameter
                - ssm:DeleteParameters
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}-*"
            - Effect: Allow
              Action:
                - kms:DescribeKey
                - kms:Encrypt
              Resource:
                - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${DbEncryptionKeyId}"
      Tags:
        ShortName: CredentialGenFunction
        Service: Rothschild
  DbCredentials:
    Type: Custom::DbCredentials
    Properties:
      ServiceToken: !GetAtt CredentialGenFunction.Arn
      KmsKeyId: !Ref DbEncryptionKeyId
      SsmPrefix: !Sub "${AWS::StackName}"

  # Database instance
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub "${AWS::StackName} database subnet group"
      SubnetIds:
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
        - !Ref SubnetPrivateC
      Tags:
        - Key: Service
          Value: Rothschild
  DbClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Sub "${AWS::StackName} cluster parameter group"
      Family: aurora5.6
      Parameters:
        innodb_strict_mode: 1
      Tags:
        - Key: Service
          Value: Rothschild
  DbCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora
      MasterUsername: "master"
      MasterUserPassword: !GetAtt DbCredentials.Password
      BackupRetentionPeriod: 7
      PreferredBackupWindow: 09:17-09:47
      PreferredMaintenanceWindow: sun:06:57-sun:07:57
      Port: 3306
      StorageEncrypted: true
      KmsKeyId: !Ref DbEncryptionKeyId
      DBSubnetGroupName: !Ref DbSubnetGroup
      DBClusterParameterGroupName: !Ref DbClusterParameterGroup
      VpcSecurityGroupIds:
        - !Ref DbSecurityGroup
      Tags:
        - Key: Service
          Value: Rothschild
    DeletionPolicy: Snapshot
  DbInstanceParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub "${AWS::StackName} instance parameter group"
      Family: aurora5.6
      Parameters:
        sql_mode: IGNORE_SPACE,STRICT_TRANS_TABLES
      Tags:
        - Key: Service
          Value: Rothschild
  DbPrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref DbCluster
      DBInstanceClass: !If [HighCapacity, db.t2.medium, db.t2.medium]
      DBSubnetGroupName: !Ref DbSubnetGroup
      DBParameterGroupName: !Ref DbInstanceParameterGroup
      Tags:
        - Key: Service
          Value: Rothschild

  # Bastion host access to RDS
  BastionHostInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionBastionHostImageMap, !Ref "AWS::Region", 64]
      AvailabilityZone: !GetAtt NatExitSubnet.AvailabilityZone
      InstanceType: t2.nano
      SubnetId: !Ref NatExitSubnet
      SecurityGroupIds:
        - !Ref BastionHostSecurityGroup
      IamInstanceProfile: !Ref BastionHostInstanceProfile
      UserData: !Base64 |
        #!/bin/bash
        yum update -y

        # Install the Amazon EC2 Systems Manager
        #!/bin/bash
        cd /tmp
        sudo yum install -y \
          https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm

        SHASUM="d4fb1c6da99c0b42d3b41329ebc630e19dc75ffbb223b6d7afd1e45a1ec01c28"
        # Install the SSH IAM Login scripts
        curl https://raw.githubusercontent.com/Giftbit/iam-ssh/3d665e59fc90ccd5a4e5eba46748ad2a85a135af/install.sh \
          -o install.sh
        if echo "$SHASUM *install.sh" | shasum -a 256 -c -; then
          chmod 755 install.sh
          ./install.sh
        fi
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} bastion host"
      - Key: Service
        Value: Rothschild
      - Key: AuthorizedUsersGroup # SSH IAM Login scripts will use this to grant or deny access (TODO I think?)
        Value: !Ref BastionHostAuthorizedUsersGroup
  BastionHostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      Policies:
        - PolicyName: ReadGroupsAndSSHPublicKeys
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:GetGroup
                  - iam:ListSSHPublicKeys
                  - iam:GetSSHPublicKey
                  - ec2:DescribeTags
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  BastionHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref BastionHostRole
  BastionHostElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref BastionHostInstance
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "Lightrail-${AWS::StackName}-Bastion-Host"
      GroupDescription: !Sub "${AWS::StackName} Bastion Host for VPC ${VPC}"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - # Access from the Giftbit office
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp
        CidrIp: 184.69.186.114/32
      SecurityGroupEgress:
      - # Outgoing TCP internet access
        FromPort: 0
        ToPort: 65535
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} bastion host security group"

  RestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist/rest/rest.zip
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 180 # seconds, 300 max
      Environment:
        Variables:
          DB_ENDPOINT: !GetAtt DbCluster.Endpoint.Address
          DB_READ_ENDPOINT: !GetAtt DbCluster.ReadEndpoint.Address
          DB_PORT: !GetAtt DbCluster.Endpoint.Port
          DB_USERNAME: "master"
          DB_PASSWORD_PARAMETER: !GetAtt DbCredentials.PasswordParameter
          LIGHTRAIL_DOMAIN: !Ref LightrailDomain
          SECURE_CONFIG_BUCKET: !Ref SecureConfigBucket
          SECURE_CONFIG_KEY_ASSUME_RETRIEVE_STRIPE_AUTH: assumeRetrieveStripeAuth.json
          SECURE_CONFIG_KEY_ASSUME_STORAGE_SCOPE_TOKEN: assumeStorageScopeToken.json
          SECURE_CONFIG_KEY_CODE_CRYTPOGRAPHY: code_cryptography_secrets.json
          SECURE_CONFIG_KEY_JWT: authentication_badge_key.json
          SECURE_CONFIG_KEY_ROLE_DEFINITIONS: RoleDefinitions.json
          SECURE_CONFIG_KEY_SENTRY: sentry_lambda_services.json
          SECURE_CONFIG_KEY_STRIPE: stripe_connect.json
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref SubnetPrivateA
          - !Ref SubnetPrivateB
          - !Ref SubnetPrivateC
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DbCredentials.PasswordParameter}"
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:DescribeKey
              Resource:
                - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${DbEncryptionKeyId}"
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Sub "arn:aws:s3:::${SecureConfigBucket}/authentication_badge_key.json"
                - !Sub "arn:aws:s3:::${SecureConfigBucket}/RoleDefinitions.json"
                - !Sub "arn:aws:s3:::${SecureConfigBucket}/sentry_lambda_services.json"
                - !Sub "arn:aws:s3:::${SecureConfigBucket}/code_cryptography_secrets.json"
                - !Sub "arn:aws:s3:::${SecureConfigBucket}/stripe_connect.json"
                - !Sub "arn:aws:s3:::${SecureConfigBucket}/assumeRetrieveStripeAuth.json"
                - !Sub "arn:aws:s3:::${SecureConfigBucket}/assumeStorageScopeToken.json"
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:DescribeKey
              Resource:
                - !Ref SecureConfigKmsArn
              Condition:
                StringLike:
                  "kms:ViaService":
                    !Sub "s3.${AWS::Region}.amazonaws.com"
                  "kms:EncryptionContext:aws:s3:arn":
                    !Sub "arn:aws:s3:::${SecureConfigBucket}/*"
      Tags:
        ShortName: RestFunction
        Service: Rothschild
      Events:
        RestApi:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        KeepWarmSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(4 minutes)
            Input: !Sub "{\"resource\":\"/{proxy+}\",\"path\":\"/v2/healthCheck\",\"httpMethod\":\"GET\",\"headers\":null,\"queryStringParameters\":null,\"pathParameters\":null,\"stageVariables\":null,\"context\":{\"accountId\":\"12345678912\",\"resourceId\":null,\"stage\":\"Prod\",\"requestId\":null,\"identity\":null,\"resourcePath\":\"/{proxy+}\",\"httpMethod\":\"GET\",\"apiId\":null},\"body\":null,\"isBase64Encoded\":false}"

  PostDeployFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - DbPrimaryInstance
      - PrivateSubnetRouting
    Properties:
      CodeUri: ../dist/postDeploy/postDeploy.zip
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 256
      Timeout: 300 # seconds, 300 max
      Environment:
        Variables:
          DB_ENDPOINT: !GetAtt DbCluster.Endpoint.Address
          DB_PORT: !GetAtt DbCluster.Endpoint.Port
          DB_USERNAME: "master"
          DB_PASSWORD_PARAMETER: !GetAtt DbCredentials.PasswordParameter
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref SubnetPrivateA
          - !Ref SubnetPrivateB
          - !Ref SubnetPrivateC
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DbCredentials.PasswordParameter}"
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:DescribeKey
              Resource:
                - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${DbEncryptionKeyId}"
      Tags:
        ShortName: PostDeployFunction
        Service: Rothschild
  PostDeployInvocation:
    Type: Custom::PostDeployInvocation
    Properties:
      ServiceToken: !GetAtt PostDeployFunction.Arn
      # This parameter isn't used, but changing it forces this function to run every time, which we want.
      BuildDate: !Ref BuildDate
